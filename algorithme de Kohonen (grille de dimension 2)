#chargement du fichier "initialisation des paramétres". Prendre garde de bien mettre deux backslash \\
source("C:\\Users\\User\\Desktop\\projet informatique\\initialisation des paramétres.R")
# paramétres
n <- 10 # taille du tableau; nombre de neurons égal à n^2, on les représente dans un tableau n*n
l <- n^2  #espace des données [0,l]*[0,l]
M <- 5000 #seuil de l'algorithme

# Générer le tableau des vecteurs référents ; on associe à chaque unité (ou neuron) un vecteur dans l'espace des données 
df <- expand.grid(row = 1:n, col = 1:n)  # tableau de données contenant les neurons (ou unités)
#ajout d'une colonne de vecteurs référents . 
df$w <- lapply(1:(n * n), function(i) c(runif(1, 0, l), runif(1, 0, l)))
#chaque ligne du tableau correspond à un neuron et son vecteur référent associé

# Fonction pour trouver les voisins d'un neuron donné
recherche_voisins <- function(row, col, n) {
  voisins <- list()
  if (row > 1) voisins <- append(voisins, list(c(row - 1, col)))  # Haut
  if (row < n) voisins <- append(voisins, list(c(row + 1, col)))  # Bas
  if (col > 1) voisins <- append(voisins, list(c(row, col - 1)))  # Gauche
  if (col < n) voisins <- append(voisins, list(c(row, col + 1)))  # Droite
  return(voisins)
}

#algorithme de Kohonen
for (t in 1:M){
  p=runif(2,min=0,max=l) #on génére un vecteur aléatoire dans l'espace des données
  
  #phase de compétition
  dist <- sapply(1:(n * n), function(i) d(p, df$w[[i]])) #liste contenant les distances entre le point et chacun des vecteurs référents dans l'espace des données
  min_index=which.min(dist) 
  argmin=c(df$row[min_index],df$col[min_index]) # le neuron gagnant
  #phase de coopération
  for(i in 1:(n * n)){
    df$w[[i]]=df$w[[i]]+eps(t)*lambda(argmin,c(df$row[i],df$col[i]),t)*(p-df$w[[i]])  #mise à jour des vecteurs référents
  }
  # Affichage à chaque itération pour observer l'évolution des vecteurs référents
  #extraire les coordonnées des vecteurs référents du tableau de données 
  x=NULL
  y=NULL
  for (i in 1:n^2){
    x=append(x,df$w[[i]][1])
    y=append(y,df$w[[i]][2])
  }
  plot(x,y, xlim = c(0, l), ylim = c(0, l),
       xlab = "X", ylab = "Y", main = paste("Itération", t, "de l'algorithme"),
       col = "blue", pch = 16)
  
  # Relier les points à leurs voisins pour visualiser la grille
  for (i in 1:(n*n)) {
    point <- df$w[[i]]
    row <- df$row[i]
    col <- df$col[i]
    voisins <- recherche_voisins(row, col, n)
    for (voisin in voisins) {
      voisin_row <- voisin[1]
      voisin_col <- voisin[2]
      voisin_w <- df$w[[which(df$row == voisin_row & df$col == voisin_col)]]
      lines(c(point[1], voisin_w[1]), c(point[2], voisin_w[2]), col = "gray")
    }
  }
  
  # Pause pour observer les changements à chaque itération
  Sys.sleep(0.05)
}


